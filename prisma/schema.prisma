// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  userRoles UserRole[]
  isDeleted Boolean    @default(false)
}

model User {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  fullname    String
  email       String        @unique
  hash        String
  city        String        @default("")
  ward        String        @default("")
  district    String        @default("")
  street      String        @default("")
  avatar      String        @default("")
  birthday    DateTime      @default(now())
  phone       String        @default("")
  gender      Boolean       @default(true)
  isDeleted   Boolean       @default(false)
  orders      Order[]
  votes       Vote[]
  repVotes    RepVote[]
  product     ProductUser[]
  comments    Comment[]
  repComments RepComment[]
  userRoles   UserRole[]
  Cart        Cart?
}

model UserRole {
  userId     Int
  roleId     Int
  user       User     @relation(fields: [userId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now())

  @@id([userId, roleId])
}

model CategoryType {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String     @default("Product List")
  categories Category[]
  isDeleted  Boolean    @default(false)
}

model Category {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  title             String
  name              String            @default("")
  description       String            @default("")
  slug              String            @unique
  thumbnail         String            @default("")
  categoryTypeId    Int?
  categoryType      CategoryType?     @relation(fields: [categoryTypeId], references: [id])
  parentId          Int?              @map("categoryId")
  parent            Category?         @relation("CategoryToCategory", fields: [parentId], references: [id])
  children          Category[]        @relation("CategoryToCategory")
  productCategories ProductCategory[]
  isDeleted         Boolean           @default(false)
}

model ProductCategory {
  categoryId Int
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  assignedAt DateTime @default(now())

  @@id([productId, categoryId])
}

model Product {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  name              String
  price             Int
  newPrice          Int
  thumbnail         String
  slug              String            @unique
  categoryId        Int
  productOptions    ProductOption[]
  votes             Vote[]
  productUsers      ProductUser[]
  productCategories ProductCategory[]
  isDeleted         Boolean           @default(false)
}

model ProductUser {
  userId     Int
  productId  Int
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  assignedAt DateTime @default(now())

  @@id([userId, productId])
}

model Variant {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  variantValues VariantValue[]
}

model VariantValue {
  id                  Int                  @id @default(autoincrement())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  name                String
  variantId           Int
  variant             Variant              @relation(fields: [variantId], references: [id])
  productOptionValues ProductOptionValue[]
}

model ProductOption {
  id            Int                  @id @default(autoincrement())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  title         String
  sku           String               @default("")
  amount        Int
  productId     Int
  product       Product              @relation(fields: [productId], references: [id])
  weight        Int
  variantValues ProductOptionValue[]
  orders        OrderItem[]
  carts         CartItem[]
  isDeleted     Boolean              @default(false)
}

model ProductOptionValue {
  productOptionId Int
  variantValueId  Int
  productOption   ProductOption @relation(fields: [productOptionId], references: [id])
  variantValue    VariantValue  @relation(fields: [variantValueId], references: [id])
  assignedAt      DateTime      @default(now())

  @@id([productOptionId, variantValueId])
}

model Cart {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  userId         Int        @unique
  user           User       @relation(fields: [userId], references: [id])
  productOptions CartItem[]
  isDeleted      Boolean    @default(false)
}

model CartItem {
  cartId          Int
  cart            Cart           @relation(fields: [cartId], references: [id])
  ProductOption   ProductOption? @relation(fields: [productOptionId], references: [id])
  productOptionId Int
  quantity        Int
  assignedAt      DateTime       @default(now())

  @@id([cartId, productOptionId])
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  type      String
  orders    Order[]
  isDeleted Boolean  @default(false)
}

model Coupon {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  start     DateTime
  end       DateTime
  code      String
  percent   Int      @default(0)
  price     Int      @default(0)
  orders    Order[]
  isDeleted Boolean  @default(false)
}

model Order {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          Int
  city            String
  district        String
  ward            String
  street          String
  description     String        @default("")
  paymentMethodId Int
  totalPrice      Int
  shippingPrice   Int           @default(0)
  orderStatusId   Int
  couponId        Int?
  orderStatus     OrderStatus   @relation(fields: [orderStatusId], references: [id])
  coupon          Coupon?       @relation(fields: [couponId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  orderItems      OrderItem[]
  isDeleted       Boolean       @default(false)
}

model OrderItem {
  productOptionId Int
  orderId         Int
  price           Int
  quantity        Int
  productOption   ProductOption @relation(fields: [productOptionId], references: [id])
  order           Order         @relation(fields: [orderId], references: [id])
  assignedAt      DateTime      @default(now())

  @@id([productOptionId, orderId])
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  orders    Order[]
  isDeleted Boolean  @default(false)
}

model Meta {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  banners     Banner[]
}

model Banner {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String   @default("")
  description String
  thumbnail   String
  isShow      Boolean  @default(true)
  metaId      Int
  meta        Meta     @relation(fields: [metaId], references: [id], onDelete: Cascade)
}

model Vote {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  productId Int
  content   String
  rate      Int
  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
  repVotes  RepVote[]
}

model RepVote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  voteId    Int
  userId    Int?
  content   String
  user      User?    @relation(fields: [userId], references: [id])
  vote      Vote     @relation(fields: [voteId], references: [id])
}

model Post {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  content     String
  thumbnail   String
  description String
  adminId     Int
  comments    Comment[]
}

model Comment {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  content     String
  postId      Int
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  post        Post         @relation(fields: [postId], references: [id])
  repComments RepComment[]
}

model RepComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  userId    Int
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
}
